#ifndef COMMON_HH
#define COMMON_HH

#include <vector>
#include <unistd.h>
#include <stdint.h>

size_t const k_max_msg = 32 << 20;

struct Conn {
  int fd = -1;
  // application's intention, for the event loop
  bool want_read = false;
  bool want_write = false;
  bool want_close = false;
  // buffered input and output
  std::vector<uint8_t> incoming;  // data to be parsed by the application
  std::vector<uint8_t> outgoing;  // responses generated by the application
};

void msg(const char *msg);
void msg_errno(char const *msg);
void die(const char *msg);
void fd_set_nb(int fd);
void buf_append(std::vector<uint8_t> &buf, uint8_t const *data, size_t len);
void buf_consume(std::vector<uint8_t> &buf, size_t len);
Conn *handle_accept(int fd);
bool try_one_request(Conn *conn);
void handle_write(Conn *conn);
void handle_read(Conn *conn);

int32_t read_full(int fd, uint8_t *buf, size_t n);
int32_t write_all(int fd, uint8_t const *buf, size_t n);
int32_t send_req(int fd, uint8_t const *text, size_t len);
int32_t read_res(int fd);

#endif
